// <auto-generated />
using System;
using BestPrice.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BestPrice.Migrations
{
    [DbContext(typeof(prj666_192a03Context))]
    partial class prj666_192a03ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062");

            modelBuilder.Entity("BestPrice.Models.Faqs", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int(10)");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("FAQs","prj666_192a03");
                });

            modelBuilder.Entity("BestPrice.Models.Locations", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int(10)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("Address")
                        .IsUnique()
                        .HasName("Address");

                    b.ToTable("Locations","prj666_192a03");
                });

            modelBuilder.Entity("BestPrice.Models.Notifications", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int(10)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int(10)");

                    b.Property<DateTimeOffset>("TimeStamp")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("1970-01-01 00:00:01");

                    b.Property<int>("UserId")
                        .HasColumnType("int(10)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .HasName("Notification_UserId_FK");

                    b.HasIndex("ProductId", "UserId")
                        .HasName("ProductId");

                    b.ToTable("Notifications","prj666_192a03");
                });

            modelBuilder.Entity("BestPrice.Models.Products", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int(10)");

                    b.Property<decimal>("BeforePrice")
                        .HasColumnType("decimal(10,0)");

                    b.Property<decimal>("CurrentPrice")
                        .HasColumnType("decimal(10,0)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<int>("SellerId")
                        .HasColumnType("int(10)");

                    b.HasKey("Id");

                    b.HasIndex("SellerId")
                        .HasName("SellerId");

                    b.ToTable("Products","prj666_192a03");
                });

            modelBuilder.Entity("BestPrice.Models.Reviews", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int(10)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1500)
                        .IsUnicode(false);

                    b.Property<int>("ProductId")
                        .HasColumnType("int(10)");

                    b.Property<string>("Rating")
                        .HasColumnType("enum('1','2','3','4','5')");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(80)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("ProductId")
                        .HasName("ProductId");

                    b.ToTable("Reviews","prj666_192a03");
                });

            modelBuilder.Entity("BestPrice.Models.SearchHistories", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int(10)");

                    b.Property<DateTime>("Date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<int>("UserId")
                        .HasColumnType("int(10)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .HasName("UserId");

                    b.ToTable("SearchHistories","prj666_192a03");
                });

            modelBuilder.Entity("BestPrice.Models.Sellers", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int(10)");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("Name");

                    b.ToTable("Sellers","prj666_192a03");
                });

            modelBuilder.Entity("BestPrice.Models.Users", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int(10)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(75)
                        .IsUnicode(false);

                    b.Property<int?>("LocationId")
                        .HasColumnType("int(10)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasName("Email");

                    b.HasIndex("LocationId")
                        .HasName("NotificationId");

                    b.ToTable("Users","prj666_192a03");
                });

            modelBuilder.Entity("BestPrice.Models.WishlistProduct", b =>
                {
                    b.Property<int>("WishlistId")
                        .HasColumnType("int(10)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int(10)");

                    b.HasKey("WishlistId", "ProductId");

                    b.HasIndex("WishlistId")
                        .HasName("WishlistProduct_WishlistId_FK");

                    b.HasIndex("ProductId", "WishlistId")
                        .HasName("ProductId");

                    b.ToTable("WishlistProduct","prj666_192a03");
                });

            modelBuilder.Entity("BestPrice.Models.Wishlists", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int(10)");

                    b.Property<int>("UserId")
                        .HasColumnType("int(10)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .HasName("UserId");

                    b.ToTable("Wishlists","prj666_192a03");
                });

            modelBuilder.Entity("BestPrice.Models.Notifications", b =>
                {
                    b.HasOne("BestPrice.Models.Products", "Product")
                        .WithMany("Notifications")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("Notification_ProductId_FK");

                    b.HasOne("BestPrice.Models.Users", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .HasConstraintName("Notification_UserId_FK");
                });

            modelBuilder.Entity("BestPrice.Models.Products", b =>
                {
                    b.HasOne("BestPrice.Models.Sellers", "Seller")
                        .WithMany("Products")
                        .HasForeignKey("SellerId")
                        .HasConstraintName("Product_SellerId_FK");
                });

            modelBuilder.Entity("BestPrice.Models.Reviews", b =>
                {
                    b.HasOne("BestPrice.Models.Products", "Product")
                        .WithMany("Reviews")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("Review_ProductId_FK");
                });

            modelBuilder.Entity("BestPrice.Models.SearchHistories", b =>
                {
                    b.HasOne("BestPrice.Models.Users", "User")
                        .WithMany("SearchHistories")
                        .HasForeignKey("UserId")
                        .HasConstraintName("SearchHistory_UserId_FK");
                });

            modelBuilder.Entity("BestPrice.Models.Users", b =>
                {
                    b.HasOne("BestPrice.Models.Locations", "Location")
                        .WithMany("Users")
                        .HasForeignKey("LocationId")
                        .HasConstraintName("User_LocationId_FK");
                });

            modelBuilder.Entity("BestPrice.Models.WishlistProduct", b =>
                {
                    b.HasOne("BestPrice.Models.Products", "Product")
                        .WithMany("WishlistProduct")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("WishlistProduct_ProductId_FK");

                    b.HasOne("BestPrice.Models.Wishlists", "Wishlist")
                        .WithMany("WishlistProduct")
                        .HasForeignKey("WishlistId")
                        .HasConstraintName("WishlistProduct_WishlistId_FK");
                });

            modelBuilder.Entity("BestPrice.Models.Wishlists", b =>
                {
                    b.HasOne("BestPrice.Models.Users", "User")
                        .WithMany("Wishlists")
                        .HasForeignKey("UserId")
                        .HasConstraintName("Wishlist_UserId_FK");
                });
#pragma warning restore 612, 618
        }
    }
}
